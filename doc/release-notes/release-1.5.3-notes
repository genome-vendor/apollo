Changes in release 1.5.3 (August 18, 2005):

1. Changes in annotation display and editing:

Added second annotation tier ("Other annotated features").  The new ARGS
types such as point_mutation go there, as well as P insertion_site,
promoter, pseudogene, and many others.

New result popup menu option: "Create new annotation".  Has pull-right
color-coded list of annotation types, so now you can create a new
annotation of the desired type right off the bat.
This is enabled if you have already selected a result and also if you
click in a blank area of the annotation panel (that menu option used to
be "Create exon"; now it says "Create new annotation" and lets you pick a
type before asking you the length).
If your new annotation extends out of range, you are now warned.

When you drag a result into the annot panel to try to create a new gene
that overlaps a non-coding annotation, it creates a new gene rather than
trying to add a "transcript" to the non-coding annot.

Other new options added to right mouse popup menus:
- Added "Change color for this feature type" menu options to result and
annot right mouse popup menus.
- Added "expand/collapse tier" menu options to annot right mouse popup
menu.

Annotation top-level menu is now colored by annotation color.

Loosened the cutoff for showing the weird-splice-site orange triangle
in small exons (e.g. CG12154)

If start codon is missing, "start codon" is colored purple in EDE instead
of green.

Show gene report (now called "Get info about this feature from Web", as
it is for results) is working again.  No more internal gene reports--gene
report URL is the same for public + private.
Can also now get FlyBase reports for non-gene annots that have an FB
identifier.

When UserTranscriptColoring is turned on, and you click on a colored-by-user
annotation, the detail panel still uses deep blue.
[Now it uses deep blue as the gene type color on the left, and it uses
the user color on the right.  I could make it use the user color on the
left, too, but actually I think this way is appropriate--the selected
annotation belongs to a type that is blue, but this particular one is
yellow or whatever.  Is that too confusing?]


2. ChadoXML:
- Fixed some bugs in roundtripping (e.g. dbxref->db_id getting changed)
- Added more types to fly.tiers to represent ARGS types.  [NOTE: anoph
types not merged into latest fly.tiers yet.]
- Enabled sequences (e.g. peptides) to have properties (so sequence
properties in ChadoXML, such as timeaccessioned, can be carried through).
(But note that sequences still can't carry synonyms--each peptide's
autosynonym is generated by the writer.)
- Handle missing start/stop codon.  It's possible there are still issues
with this due to repeated buggy example files.
- "middletier" features are often missing their name.  Use uniquename as
name if name is missing.  Also, uniquename used to match the dbxref_id,
but now often it doesn't.  Be sure to preserve both.
- Unstranded annotations:  for now, they are being shown on the + or -
strand (minus if fmin>fmax, which shouldn't really happen--that was buggy 
data).  Harvard would like to see them appear on both strands.
The annot info window shows the unstranded=true property, but that
property is not written out.
- Pop up a warning if user tries to edit a "frozen" annot, based on the
presence of certain special featureprops:
  - unstranded [added by Apollo]
  - warn_about_edit
  - mutant_in_strain
  - transpliced_transcript
  [but note that trans-spliced transcripts have never been handled properly
  in Apollo, and we don't have time to fix that.]
- Translational readthrough:  stop_codon_readthrough is a generalization of
stop_codon_redefinition_as_selenocysteine.
[Now stop_codon_readthrough (and readthrough_stop_codon) and
stop_codon_redefinition_as_selenocysteine are all treated the same; the
wording in the annot info panel has been changed from 
"Replace stop codon with selenocysteine" to "Readthrough stop codon" ONLY
for data read by the ChadoXML adapter.  The behavior for all three of
these featureprops is the same:  readthrough stop codon is shown in pink.]

3. BLAST layering:  
- Fixed BLAST parser to deal with latest NCBI BLAST output, as well as
FlyBlast output of 8/15/2005 (but that format is about to change).
- Can now layer NCBI BLAST results where query was an unknown sequence,
and currently loaded region is some genomic region.  (Select the checkbox
that says "BLAST results are for an unknown query sequence against the
chromosomes at NCBI")
Only hits to the currently loaded chromosome will be shown.  (If region
doesn't have a chromosome defined, all hits will be shown.)  This needs
more testing.
- Note that it turns out that the Chromosome arm coordinates in data from
IU Apollo cgi don't match the NCBI coordinates, so hits appear shifted
over somewhat.  This is a data problem, not an Apollo bug.


4. Other changes:

game.tiers is now called fly.tiers (since it's fly-specific).  To make it
easier on longtime Apollo users, Apollo now checks whether you have a
.apollo/game.tiers and offers to rename it .apollo/fly.tiers (it also now
does this if you have a .apollo/game.style).

Default orientation for detail panel is now horizontal (as per Sima's
request).  If you prefer vertical, add this to your ~/.apollo/apollo.cfg:
    FrameOrientation        "vertical"

Some additions by TAIR to make Apollo work for them (shouldn't affect
anyone else).  It will be to everyone's advantage if TAIR stays in synch
with the Apollo codebase.

Steve Searle fixed some things in the EnsJ and Synteny adapters.

Mark fixed some Chado JDBC things.



Changes in release 1.5.4 (August 22, 2005);

Fixed a JVM-dependent problem in Config.java that had to do with a
variable getting initialized.  It caused problems with some JVMs and not
others--I think it had to do with whether they instantiated the class at
startup or just when the class was needed.

Fixed: Problem with stop codon not being recognized after gene is changed
(seems to happen only when data is loaded from ChadoXML--same data loaded
from GAME XML doesn't have this problem!):
Load data/test-for-stop-codon-bug.chado.
Add the rest of the genie exons to the 3' end of CG14372 to extend it.
Now select the exon of CG14372 that *was* its last exon before, and set
its 3' boundary to match the edge of the corresponding purple genie exon.
Now the lengthened gene doesn't get a stop codon (even when you say
"Calculate longest ORF").

Fixed: Stop codon dragging off by one: if you select a stop codon and
drag it onto a transcript, it comes down one base to the left of where it
should (on both strands).
