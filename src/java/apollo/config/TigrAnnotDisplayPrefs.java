package apollo.config;

import apollo.datamodel.*;

import java.util.regex.Pattern;
import java.util.regex.Matcher;
import javax.swing.JOptionPane;

/**
 * Display preferences for TIGR chado annotation databases.
 *
 * @version $Revision: 1.1 $ $Date: 2006/09/15 17:36:57 $ $Author: jcrabtree $
 */
public class TigrAnnotDisplayPrefs extends DefaultDisplayPrefs {

  protected static Pattern tigrFeatNamePattern = Pattern.compile("^(\\w+)\\.(\\w+)\\.(\\d+)\\.(\\d+)$");
  protected static Pattern urlIdPattern = Pattern.compile("__ID__");
  protected static Pattern urlDbPattern = Pattern.compile("__DB__");
  protected static Pattern urlTypePattern = Pattern.compile("__TYPE__");
  protected static Pattern urlIdNumPattern = Pattern.compile("__IDNUM__");
  protected static Pattern urlVerPattern = Pattern.compile("__VER__");
  protected static Pattern urlHitSeqNamePattern = Pattern.compile("__HIT_SEQ_NAME__");

  // -----------------------------------------------------------------------
  // DisplayPrefsI
  // -----------------------------------------------------------------------

  /**
   * URLs are generated by taking the URL template ("weburl") defined in the 
   * feature file and replacing the following special strings with values
   * extracted from the seq feature.
   *
   * __ID__  -  feature.getId()
   *
   * non-search hit features only (these fields are parsed from getId()):
   *  __DB__  -  feature database name
   *  __TYPE__  -  feature type
   *  __IDNUM__ - feature id "number"
   *  __VER__  -  feature version
   *
   * search hit features only:
   *  __HIT_SEQ_NAME__ - name of the "hit" sequence
   *
   */
  public String generateURL (SeqFeatureI f) {

    // Get URL template from the tiers file
    String ft = f.getFeatureType();
    FeatureProperty prop = Config.getPropertyScheme().getFeatureProperty(ft);
    String urlString = prop.getURLString();

    if (urlString == null) {
      String m = "Sorry, no URL registered for type " + ft + " in tiers file";
      JOptionPane.showMessageDialog(null,m);
      return null;
    }

    // Look at top-level type of the feature
    String tlt = f.getTopLevelType();

    // Special case for linking to Manatee's ORF_infopage.cgi script; it will only 
    // accept a transcript uniquename, not a gene uniquename, so if the requested
    // feature is a gene or pseudogene we'll create a link to its first descendant 
    // instead.
    if ((f instanceof AnnotatedFeature) && f.hasKids() && tlt.endsWith("gene")) {
      f = f.getFeatureAt(0);
    }

    // do all the replacements
    Matcher m = null;

    // any search hit feature
    String hsn = getHitSeqName(f, true);
    if (hsn != null) {
      m = urlHitSeqNamePattern.matcher(urlString);
      urlString = m.replaceAll(hsn);
    }

    // SeqFeatureI.getId()
    String id = f.getId();
    if (id != null) {
      m = urlIdPattern.matcher(urlString);
      urlString = m.replaceAll(id);

      // Any feature that adheres to TIGR chado feature naming convention (db.featType.idnum.ver)
      try {
        TigrFeatureName tfn = new TigrFeatureName(f.getId());

        String db = tfn.getDb();
        if (db != null) {
          m = urlDbPattern.matcher(urlString);
          urlString = m.replaceAll(db);
        }
        
        String ftype = tfn.getFeatType();
        if (ftype != null) {
          m = urlTypePattern.matcher(urlString);
          urlString = m.replaceAll(ftype);
        }
        
        String idnum = tfn.getIdNum();
        if (idnum != null) {
          m = urlIdNumPattern.matcher(urlString);
          urlString = m.replaceAll(idnum);
        }
        
        String ver = tfn.getVersion();
        if (ver != null) {
          m = urlVerPattern.matcher(urlString);
          urlString = m.replaceAll(ver);
        }
      }
      catch (IllegalArgumentException iae) {
      }
    }
    return urlString;
  }

  public String getDisplayName(RangeI r) {

    // override default for search hits
    String hsn = getHitSeqName(r, false);
    if (hsn != null) return hsn;

    return super.getDisplayName(r);
  }

  // -----------------------------------------------------------------------
  // TigrFeatureIdSpec - inner class
  // -----------------------------------------------------------------------

  /**
   * Parse standard TIGR chado uniquename of the form 'eha3.assembly.1234.1' 
   * into its component parts.
   */
  protected class TigrFeatureName {

    String db;
    String featType;
    String idNum;
    String version;

    // Constructor
    TigrFeatureName(String uniquename) {
      Matcher m = tigrFeatNamePattern.matcher(uniquename);

      if (m.matches()) {
        int ng = m.groupCount();
        int g = 1;
        this.db = m.group(g++);
        this.featType = m.group(g++);
        this.idNum = m.group(g++);
        this.version = m.group(g++);
      } 
      else {
        throw new IllegalArgumentException("invalid TIGR feature id " + uniquename);
      }
    }

    // Accessors
    String getDb() { return db; }
    String getFeatType() { return featType; }
    String getIdNum() { return idNum; }
    String getVersion() { return version; }

  }

  // -----------------------------------------------------------------------
  // TigrannotDisplayPrefs
  // -----------------------------------------------------------------------

  protected static Pattern pfamIdPattern = Pattern.compile("^(PF\\d+)\\.\\d+_\\d+$");
  protected static Pattern niaaGbIdPattern = Pattern.compile("^GB_(\\w+\\.\\d+)_\\S*$");
  protected static Pattern niaaRfIdPattern = Pattern.compile("^RF_(\\w\\w_\\d+\\.\\d+)_\\S*$");
  protected static Pattern niaaSpIdPattern = Pattern.compile("^SP_([a-zA-Z0-9]+)_\\S*$");

  protected String getHitSeqName(RangeI r, boolean forUrl) {
    String name = null;

    // FeatureSet of FeaturePairs
    if (r instanceof FeatureSetI) {
      FeatureSetI fs = (FeatureSetI)r;
      SeqFeatureI f1 = fs.getFeatureAt(0);

      if ((f1 != null) && (f1 instanceof FeaturePair)) {
        SeqFeatureI hf = f1.getHitFeature();
        name = hf.getName();
      }
    } 
    // individual FeaturePair
    else {
      if (r instanceof SeqFeatureI) {
        SeqFeatureI sf = (SeqFeatureI)r;
        SeqFeatureI hf = sf.getHitFeature();
        name = hf.getName();
      }
    }

    // Additional rewriting needed to format these ids for use in URLs:
    if (forUrl) {
      if (name != null) {
        boolean matched = false;

        // TIGR PFAM id of the form 'PF01251.7_124':
        Matcher m = pfamIdPattern.matcher(name);
        if (m.matches()) {
          name = m.group(1);
          matched = true;
        }
        
        // (mangled) TIGR niaa id of the form GB_AAH959159.1_63102089_BC095919
        if (!matched) {
          m = niaaGbIdPattern.matcher(name);
          if (m.matches()) {
            name = m.group(1);
            matched = true;
          }
        }
        
        // (mangled) TIGR niaa id of the form RF_XP_472843.1_50925014_XM_472843
        if (!matched) {
          m = niaaRfIdPattern.matcher(name);
          if (m.matches()) {
            name = m.group(1);
            matched = true;
          }
        }
        
        // (mangled) TIGR niaa id of the form SP_P42932_TCPQ_MOUSE
        if (!matched) {
          m = niaaSpIdPattern.matcher(name);
          if (m.matches()) {
            name = m.group(1);
            matched = true;
          }
        }
      }
    }
    return name;
  }
}
